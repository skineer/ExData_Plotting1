cacheSolve(cached)
cacheSolve(cached)
cacheSolve(cached)
cacheSolve(cached)
cacheSolve(cached)
source('C:/Users/Renato/ProgrammingAssignment2/cachematrix.R')
cached <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
cacheSolve(cached)
cacheSolve(cached)
cached <- makeCacheMatrix(matrix(c(1,2,3,10),2,2))
cacheSolve(cached)
cached <- makeCacheMatrix(matrix(c(1,2,3,6),2,2))
cacheSolve(cached)
source('C:/Users/Renato/ProgrammingAssignment2/cachematrix.R')
cached <- makeCacheMatrix(matrix(c(1,2,3,6),2,2))
cacheSolve(cached)
cached <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
cacheSolve(cached)
gl(20,10)
install.packages("XML")
install.packages("xlsx")
install.packages("JSON")
install.packages("data.table")
install.packages("jsonlite")
arq <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
getwe()
getwd()
arq <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "./housing")
arq <- read.csv("./housing")
View(arq)
million <- arq[arq$VAL >= 1000000]
million <- arq[arq$VAL >= 1000000,]
nrow(million)
shit <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx0", "./naturalgas")
shit <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "./naturalgas")
library("xlsx")
shit <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "./survey")
million <- arq[arq$VAL == 20, ]
million <- arq[arq$VAL == 24, ]
View(million)
million <- arq[as.integer(arq$VAL) == 24, ]
million <- arq[as.integer(arq$VAL) == 24, ]
class(arq$VAL)
million <- arq[as.integer(arq$VAL) == 24 & complete.cases(arq$VAL), ]
library("xlsx")
library("xlsx")
?xlsx
getwd()
a <- read.xlsx("./naturalgas.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:12, header = TRUE)
a
sum(a$Zip * a$Ext, na.rm = TRUE)
library("XML")
?`XML
?XML
?XML
??XML
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
xml <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
xml <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "./xmlexample")
xml <- xmlTreeParse("./xmlexample", useInternalNodes = TRUE)
xml_root <- xmlRoot(xml)
xmlname(xml_root)
xmlName(xml_root)
xpathSApply(xml_root, "//zip", xmlValue)
xpathSApply(xml_root, "//zipcode", xmlValue)
cep <- xpathSApply(xml_root, "//zipcode", xmlValue)
filter(cep, cep == 21202)
cep[,]
cep <- as.integer(xpathSApply(xml_root, "//zipcode", xmlValue))
class(cep)
subset(cep, cep == 23201)
subset(cep, cep == 21230)
length(subset(cep, cep == 21230))
exirt
exit
exit()
bye()
bye
library("xlsx")
?xlsx
dt <- read.xlsx("C:\\Users\\Renato\\Desktop\\decision tree.xlsx", sheetIndex = 1, header = TRUE)
dt
dt <- read.xlsx("C:\\Users\\Renato\\Desktop\\decision tree.xlsx", sheetIndex = 1, header = TRUE)
dt
train <- read.xlsx("C:\\Users\\Renato\\Desktop\\decision tree.xlsx", sheetIndex = 1, header = TRUE)
library("party")
install.packages("coin")
library("party")
library("coin")
library("coin")
library("rpart")
install.packages("rpart")
install.packages("rpart")
library("rpart")
View(train)
dt <- rpart(Espera ~ Sexta...Sabado + Faminto + Clientes + tipo,
method="class", data=train,
control=rpart.control(minsplit=1) parms=list(split=’information’)
dt <- rpart(Espera ~ Sexta...Sabado + Faminto + Clientes + tipo,
method="class", data=train,
control=rpart.control(minsplit=1),
parms=list(split=’information’)
dt <- rpart(Espera ~ Sexta...Sabado + Faminto + Clientes + tipo,
method="class", data=train,
control=rpart.control(minsplit=1),
parms=list(split=’information’))
dt <- rpart(Espera ~ Sexta...Sabado + Faminto + Clientes + tipo,
method="class", data=train,
parms=list(split=’information’))
dt <- rpart(Espera ~ train$Sexta...Sabado + train$Faminto + train$Clientes + train$Tipo,
method="class",
parms=list(split=’information’))
dt <- rpart(Espera ~ train$Sexta...Sabado + train$Faminto + train$Clientes + train$Tipo)
dt <- rpart(train$Espera ~ train$Sexta...Sabado + train$Faminto + train$Clientes + train$Tipo)
dt <- rpart(train$Espera ~ train$Sexta...Sabado + train$Faminto +
train$Clientes + train$Tipo, control = rpart.control(minsplit = 1))
dt <- rpart(train$Espera ~ train$Sexta...Sabado + train$Faminto +
train$Clientes + train$Tipo, control = rpart.control(minsplit = 1),
parms = list(split = "information"))
summary(dt)
rpart.plot(dt, type = 4, extra = 1)
?rpart.plot
install.packages("rpart.plot")
rpart.plot(dt, type = 4, extra = 1)
library("rpart.plot")
rpart.plot(dt, type = 4, extra = 1)
rpart.plot(dt)
rpart.plot(dt, type = 1)
rpart.plot(dt, type = 2)
rpart.plot(dt, type = 3)
rpart.plot(dt, type = 4)
rpart.plot(dt, type = 5)
rpart.plot(dt, type = 1)
library("carret")
install.packages("carret")
install.packages("caret")
library("caret")
install.packages("scales")
library("scales")
library("caret")
linear <- read.xlsx("C:\\Users\\Renato\\Desktop\\linear.xlsx", sheetIndex = 1, header = TRUE)
library("xlsx")
linear <- read.xlsx("C:\\Users\\Renato\\Desktop\\linear.xlsx", sheetIndex = 1, header = TRUE)
View(linear)
linear <- read.xlsx("C:\\Users\\Renato\\Desktop\\linear.xlsx", sheetIndex = 1, header = TRUE)
View(linear)
train_control <- trainControl(method="LOOCV")
model1 <- train(Y ~ ., data=linear, trControl=train_control, method="lm")
summary(model1)
summary(train_control)
kmeans <- data.frame(x = c(1,1,2,2,5,6,5), y = c(1,2,1,2,1,1,2))
View(kmeans)
km1 = kmeans(kmeans, 2, centers = vector(c(3,0), c(5,0)))
km1 = kmeans(kmeans, 2, centers = c(3,0,5,0)
)
?kmeans
matrix(a)
matrix(a = 2)
matrix('renato')
matrix(x = 'renato')
matrix('renato',1)
matrix('renato',1,1,1,1)
matrix('renato',1,1,1,1,1)
matrix(c(-5, 0, 5, -5, 0, 5), 3, 2)
matrix(c(3, 0, 5, 0), 2, 2)
matrix(c(3, 5, 0, 0), 2, 2)
km1 = kmeans(kmeans, 2, centers = matrix(c(3,5,0,0)), iter.max = 5)
km1 = kmeans(kmeans, 2, centers = matrix(c(3,5,0,0),2,2), iter.max = 5)
summary(km1)
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), iter.max = 5)
plot(kmeans, col =(km1$cluster +1) , main="K-Means result with 2 clusters",
pch=20, cex=2)
plot(kmeans)
plot(kmeans, col =(km1$cluster +1) , main="K-Means result with 2 clusters",
pch=20, cex=2)
names(km1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), iter.max = 1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(3,5,0,0),2,2), iter.max = 1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), iter.max = 1)
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), iter.max = 100)
km1$centers
names(km1)
?kmeans
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), trace = 1)
km1 = kmeans(kmeans, 2, centers = matrix(c(3,0,5,0),2,2), iter.max = 5, trace = 1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(5.33,1.33,1.5,1.5),2,2), iter.max = 5, trace = 1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(5.33,1.33,1.5,1.5),2,2), iter.max = 5, trace = 1)
km1$centers
km1 = kmeans(kmeans, 2, centers = matrix(c(5.33,1.33,1.5,1.5),2,2), iter.max = 5, trace = 1)
km1$centers
library("scales")
library("caret")
library("xlsx")
linear <- read.xlsx("C:\\Users\\Renato\\Desktop\\linear.xlsx", sheetIndex = 1, header = TRUE)
train_control <- trainControl(method="LOOCV")
model1 <- train(Y ~ ., data=linear, trControl=train_control, method="lm")
summary(model1)
View(linear)
prever <- data.frame(X1 = 245.4, X2 = 9700, X3 = 4600, X4 = 1835)
predict(model1, prever)
prever <- data.frame(X1 = 245, X2 = 4, X3 = 9700, X4 = 4600, X5 = 1835)
predict(model1, prever)
install.packages("RMySQL")
library("RMySQL")
db <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(db, "show databases")
View(result)
dbDisconnect(db)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
library(rhdf5)
library(rpart.plot)
library(rhdf5)
created <- h5createFile("example.h5")
install.packages("httr")
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "c1b15f312219e42c6a67",
secret = "0d505b06ff7d716b5a370917f039a99436400c4c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("sqldf")
library("sqldf")
acs <- read.csv("C:\\Users\\Renato\\Desktop\\acs.csv")
View(acs)
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
as.vector(sqldf("select distinct AGEP from acs"))
as.integer(sqldf("select distinct AGEP from acs"))
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
unique(acs$AGEP)
length(unique(acs$AGEP))
length(sqldf("select unique AGEP from acs"))
length(sqldf("select distinct AGEP from acs"))
nrows(sqldf("select distinct AGEP from acs"))
nrow(sqldf("select distinct AGEP from acs"))
url <- url("http://biostat.jhsph.edu/~jleek/contact.html")
url_lin <- readlines(url)
url_lin <- readline(url)
url_lin <- readline(url)
url <- url("http://biostat.jhsph.edu/~jleek/contact.html")
url_lin <- readLines(url)
url_lin[10,]
library("XML")
url_lin <- htmlTreeParse(url, useInternalNodes = TRUE)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
url_lin <- htmlTreeParse(url, useInternalNodes = TRUE)
class(url_lin)
url <- url("http://biostat.jhsph.edu/~jleek/contact.html")
url_lin <- readLines(url)
as.data.frame(url_lin)
url_lin <- as.data.frame(url_lin)
url_lin[10,]
nchar(url_lin[10,])
nchar(as.charactere(url_lin[10,])
)
nchar(as.character(url_lin[10,]))
nchar(as.character(url_lin[20,]))
nchar(as.character(url_lin[100,]))
nchar(as.character(url_lin[30,]))
for <- read.table("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", sep = ' ', header = FALSE)
f <- read.table("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", sep = ' ', header = FALSE)
f <- read.table("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", sep = ' ', header = FALSE, skip = 3)
f <- read.table("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", sep = ' ', header = FALSE, skip = 4)
f <- read.table("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", sep = ' ', header = FALSE, skip = 5)
f <- read.fwf("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", widths = c(15, 19, 28, 31, 41, 45, 54, 58, 62), header = FALSE, skip = 4)
View(f)
f <- read.fwf("C:\\Users\\Renato\\Desktop\\getdata-wksst8110.for", widths = c(15, 4, 9, 4, 9, 4, 9, 4, 4), header = FALSE, skip = 4)
View(f)
mean(f$V4)
sum(f$V4)
clear
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "c1b15f312219e42c6a67",
secret = "0d505b06ff7d716b5a370917f039a99436400c4c")
myapp
myapp <- oauth_app("github",
client_id = "c1b15f312219e42c6a67",
secret = "0d505b06ff7d716b5a370917f039a99436400c4c")
myapp <- oauth_app("github",
key = "c1b15f312219e42c6a67",
secret = "0d505b06ff7d716b5a370917f039a99436400c4c")
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "c1b15f312219e42c6a67",
secret = "0d505b06ff7d716b5a370917f039a99436400c4c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
names(req)
req$content
install.packages(plyr)
install.packages("plyr")
library(plyr)
df <- data.frame(X = rnorm(400, mean = 0, sd = 1))
plot(df)
library(lattice)
densityplot(df)
densityplot(df$X)
library("dplyr")
install.packages("dplyr")
library("dplyr")
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dyplr)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
View(cran)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cran)
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"
| | country == "IN")
filter(cran, country == "US"
| country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
exit
library(swirl)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
options(editor = "internal")
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desccount)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
package.install("tydr")
install.packages("tydr")
install.packages("tidyr")
library(tidyr)
setwd("C:\\Users\\Renato\\Desktop")
library("data.table")
energy <- fread("power_cons\\household_power_consumption.txt",
sep = ';', header = TRUE, stringsAsFactors = FALSE)
energy <- fread("power_cons\\household_power_consumption.txt",
sep = ';', header = TRUE, stringsAsFactors = FALSE,
na.strings = '?')
object.size(energy)
149582752 / 1024
hist(energy$Global_active_power)
str(energy)
as.Date(energy$Date)
energy_sel <- select(energy, Date == '01/02/2007' | Date == '02/02/2007')
library("dplyr")
energy_sel <- select(energy, Date == '01/02/2007' | Date == '02/02/2007')
energy_sel <- filter(energy, Date == '01/02/2007' | Date == '02/02/2007')
View(energy)
library("lubridate")
energy_sel <- filter(energy, dmy(Date) == '01/02/2007' | dmy(Date) == '02/02/2007')
head(dmy(energy$Date))
energy_sel <- filter(energy, dmy(Date) == '2007-02-01' | dmy(Date) == '2007-02-02')
View(energy_sel)
hist(energy_sel$Global_active_power)
hist(energy_sel$Global_active_power, col = "red")
hist(energy_sel$Global_active_power, col = "red",
xlab = "Global Active Power (kilowatts)",
main = "Global Active Power")
setwd("C:\\Users\\Renato\\ExData_Plotting1")
copy.dev(png, file = "plot1.png" )
dev.copy(png, file = "plot1.png" )
dev.off()
View(energy_sel)
library("data.table")
library("dplyr")
library("lubridate")
weekdays(ymd(energy_sel$Date))
View(energy_sel)
weekdays(dmy(energy_sel$Date))
as.factor(weekdays(dmy(energy_sel$Date)))
as.factor(weekdays(dmy(energy_sel$Date), abbreviate = TRUE))
View(energy_sel)
df <- transform(energy_sel, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
View(df)
df <- transform(energy, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
head(energy_sel$Date)
df <- transform(energy_sel, timestamp=as.POSIXct(paste(Date, Time), "%d/%m/%Y %H:%M:%S"))
View(df)
energy_sel <- filter(energy, dmy(Date) == '2007-02-01' | dmy(Date) == '2007-02-02')
library("data.table")
library("dplyr")
library("lubridate")
setwd("C:\\Users\\Renato\\ExData_Plotting1")
#read the file
energy <- fread("C:\\Users\\Renato\\Desktop\\power_cons\\household_power_consumption.txt",
sep = ';', header = TRUE, stringsAsFactors = FALSE,
na.strings = '?')
# select the two days
energy_sel <- filter(energy, dmy(Date) == '2007-02-01' | dmy(Date) == '2007-02-02')
# generate de histogram
plot(energy_sel$Date, energy_sel$Global_active_power,
type = "l")
plot(paste(energy_sel$Date, energy_sel$Time), energy_sel$Global_active_power,
type = "l")
plot(ymd(energy_sel$Date), energy_sel$Global_active_power,
type = "l")
plot(ymd(paste(energy_sel$Date, energy_sel$Time)), energy_sel$Global_active_power,
type = "l")
head(ymd(energy_sel$Date))
View(energy_sel)
plot(dmy(paste(energy_sel$Date, energy_sel$Time)), energy_sel$Global_active_power,
type = "l")
head(dmy(energy_sel$Date))
plot(dmy(energy_sel$Date), energy_sel$Global_active_power,
type = "l")
View(energy_sel)
dmy_hms(paste(energy_sel$Date, energy_sel$Time))
plot(dmy_hms(energy_sel$Date, energy_sel$Time), energy_sel$Global_active_power,
type = "l")
plot(dmy_hms(paste(energy_sel$Date, energy_sel$Time)),
energy_sel$Global_active_power,
type = "l")
plot(dmy_hms(paste(energy_sel$Date, energy_sel$Time)),
energy_sel$Global_active_power,
type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
dev.copy(png, file = "plot2.png")
dev.off()
